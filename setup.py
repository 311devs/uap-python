#!/usr/bin/env python
import os
from distutils import log
from distutils.core import Command
from setuptools import setup
from setuptools.command.develop import develop as _develop
from setuptools.command.sdist import sdist as _sdist


class build_regexes(Command):
    description = 'build supporting regular expressions from uap-core'
    user_options = [
        ('work-path=', 'w',
         'The working directory for source files. Defaults to .'),
    ]

    def initialize_options(self):
        self.work_path = None

    def finalize_options(self):
        if self.work_path is None:
            self.work_path = os.path.realpath(os.path.join(os.path.dirname(__file__)))

    def run(self):
        work_path = self.work_path
        if os.path.exists(os.path.join(work_path, '.git')):
            from subprocess import check_output
            log.info("initializing git submodules")
            check_output(['git', 'submodule', 'init'], cwd=work_path)
            check_output(['git', 'submodule', 'update'], cwd=work_path)

        yaml_src = os.path.join(work_path, 'uap-core', 'regexes.yaml')
        if not os.path.exists(yaml_src):
            raise RuntimeError(
                'Unable to find regexes.yaml, should be at %r' % yaml_src)

        log.info('Converting regexes.yaml to _regexes.py...')
        import yaml
        py_dest = os.path.join(work_path, 'ua_parser', '_regexes.py')
        with open(yaml_src, 'rb') as fp:
            regexes = yaml.safe_load(fp)
        with open(py_dest, 'wb') as fp:
            fp.write('############################################\n')
            fp.write('# NOTICE: This file is autogenerated from  #\n')
            fp.write('# regexes.yaml. Do not edit by hand,       #\n')
            fp.write('# instead, re-run `setup.py build_regexes` #\n')
            fp.write('############################################\n')
            fp.write('\n')
            fp.write('from .user_agent_parser import (\n')
            fp.write('    UserAgentParser, DeviceParser, OSParser,\n')
            fp.write(')\n')
            fp.write('\n')
            fp.write('__all__ = (\n')
            fp.write('    \'USER_AGENT_PARSERS\', \'DEVICE_PARSERS\', \'OS_PARSERS\',\n')
            fp.write(')\n')
            fp.write('\n')
            fp.write('USER_AGENT_PARSERS = [\n')
            for device_parser in regexes['user_agent_parsers']:
                fp.write('    UserAgentParser(\n')
                fp.write('        %r,\n' % device_parser['regex'])
                fp.write('        %r,\n' % device_parser.get('family_replacement'))
                fp.write('        %r,\n' % device_parser.get('v1_replacement'))
                fp.write('        %r,\n' % device_parser.get('v2_replacement'))
                fp.write('    ),\n')
            fp.write(']\n')
            fp.write('\n')
            fp.write('DEVICE_PARSERS = [\n')
            for device_parser in regexes['device_parsers']:
                fp.write('    DeviceParser(\n')
                fp.write('        %r,\n' % device_parser['regex'])
                fp.write('        %r,\n' % device_parser.get('regex_flag'))
                fp.write('        %r,\n' % device_parser.get('device_replacement'))
                fp.write('        %r,\n' % device_parser.get('brand_replacement'))
                fp.write('        %r,\n' % device_parser.get('model_replacement'))
                fp.write('    ),\n')
            fp.write(']\n')
            fp.write('\n')
            fp.write('OS_PARSERS = [\n')
            for device_parser in regexes['os_parsers']:
                fp.write('    OSParser(\n')
                fp.write('        %r,\n' % device_parser['regex'])
                fp.write('        %r,\n' % device_parser.get('os_replacement'))
                fp.write('        %r,\n' % device_parser.get('os_v1_replacement'))
                fp.write('        %r,\n' % device_parser.get('os_v2_replacement'))
                fp.write('    ),\n')
            fp.write(']\n')
            fp.write('\n')


class develop(_develop):
    def run(self):
        self.run_command('build_regexes')
        _develop.run(self)


class sdist(_sdist):
    sub_commands = _sdist.sub_commands + [('build_regexes', None)]


cmdclass = {
    'develop': develop,
    'sdist': sdist,
    'build_regexes': build_regexes,
}


setup(
    name='ua-parser',
    version='0.5.1',
    description="Python port of Browserscope's user agent parser",
    author='PBS',
    author_email='no-reply@pbs.org',
    packages=['ua_parser'],
    package_dir={'': '.'},
    license='LICENSE.txt',
    zip_safe=False,
    url='https://github.com/ua-parser/uap-python',
    include_package_data=True,
    setup_requires=['pyyaml'],
    install_requires=[],
    cmdclass=cmdclass,
    classifiers=[
        'Development Status :: 4 - Beta',
        'Environment :: Web Environment',
        'Intended Audience :: Developers',
        'Operating System :: OS Independent',
        'License :: OSI Approved :: Apache Software License',
        'Programming Language :: Python',
        'Topic :: Internet :: WWW/HTTP',
        'Topic :: Software Development :: Libraries :: Python Modules',
        'Programming Language :: Python',
        'Programming Language :: Python :: 2',
        'Programming Language :: Python :: 2.6',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.3',
        'Programming Language :: Python :: 3.4',
        'Programming Language :: Python :: Implementation :: CPython',
        'Programming Language :: Python :: Implementation :: PyPy',
    ],
)
